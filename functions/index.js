/* eslint-disable no-undef */
/* eslint-env node */

const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp();

exports.sendNewRdvNotification = functions.firestore
  .document('rdvs/{rdvId}')
  .onCreate(async (snap, context) => {
    const rdv = snap.data();
    console.log("Nouveau document de rendez-vous crÃ©Ã©:", context.params.rdvId);  // Log du rdvId du document crÃ©Ã©

    // VÃ©rification de la prÃ©sence des donnÃ©es nÃ©cessaires
    const rdvStartDate = rdv.start ? new Date(rdv.start) : null;
    console.log("Date de dÃ©but du rendez-vous:", rdvStartDate);

    // Si les dates sont valides, les formater. Sinon, utiliser une valeur par dÃ©faut.
    const formattedDate = rdvStartDate && !isNaN(rdvStartDate.getTime())
      ? rdvStartDate.toLocaleString('fr-FR', {
          weekday: 'short',
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        })
      : 'Date de rendez-vous non spÃ©cifiÃ©e';

    console.log("Date formatÃ©e pour la notification:", formattedDate); // Log de la date formatÃ©e

    // Si le nom du client est valide, l'utiliser. Sinon, marquer comme "Client non spÃ©cifiÃ©".
    const clientName = rdv.clientName ? rdv.clientName : 'Client non spÃ©cifiÃ©';
    console.log("Nom du client:", clientName);  // Log du nom du client

    // Payload de la notification
    const payload = {
      notification: {
        title: 'ðŸ“… Nouveau rendez-vous !',
        body: `Un rendez-vous a Ã©tÃ© pris par ${clientName} le ${formattedDate}`,
        sound: 'default',
      },
      data: {
        rdvId: context.params.rdvId,
        click_action: 'FLUTTER_NOTIFICATION_CLICK',
      },
    };

    try {
      // RÃ©cupÃ©rer tous les tokens d'appareils enregistrÃ©s
      console.log("RÃ©cupÃ©ration des tokens d'appareils...");
      const tokensSnapshot = await admin.firestore().collection('deviceTokens').get();
      const tokens = tokensSnapshot.docs.map((doc) => doc.id);

      if (tokens.length === 0) {
        console.log('Aucun token trouvÃ© pour envoyer la notification.');
        return null; // Aucun token, donc on ne fait rien
      }

      console.log(`Tokens rÃ©cupÃ©rÃ©s : ${tokens.length} token(s)`);  // Log du nombre de tokens rÃ©cupÃ©rÃ©s

      // Envoi de la notification aux appareils enregistrÃ©s
      console.log("Envoi de la notification...");
      const response = await admin.messaging().sendToDevice(tokens, payload);
      console.log(`âœ… ${response.successCount} notification(s) envoyÃ©e(s) sur ${tokens.length}`);

      // Si l'envoi a Ã©chouÃ© pour certains tokens, on les logue
      if (response.failureCount > 0) {
        console.log(`Ã‰chec de l'envoi pour ${response.failureCount} token(s)`);
        response.results.forEach((result, index) => {
          if (result.error) {
            console.log(`Erreur pour le token ${tokens[index]} : ${result.error.message}`);
          }
        });
      }

    } catch (error) {
      // Si une erreur se produit, loguer l'erreur sans interrompre la fonction
      console.error("Erreur lors de l'envoi de la notification:", error);
      return null; // Retourner null si une erreur se produit, mais sans Ã©chouer
    }
  });
